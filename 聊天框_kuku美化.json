{
    "id": "4086a81a-fc80-48d2-8cf8-5b41020f72ea",
    "scriptName": "聊天框",
    "findRegex": "\\[和(.*?)的聊天\\]([\\s\\S]*\\d+:\\d+\\])",
    "replaceString": "```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Chat Interface</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js\" type=\"module\"></script>\n    <style>\n@font-face {\n        font-family: \"MiaoMiao\";  \n        src: url(\"https://files.catbox.moe/ttodo5.ttf\") format(\"truetype\");\n        font-display: swap;       \n    }\n\n    \n    body, \n    .chat-header h2,\n    .header-status,\n    .message-content,\n    .message-time,\n    .input-field,\n    .input-field::placeholder,\n    .send-btn,\n    .emoji-btn,\n    .caller-name,\n    .call-status,\n    .preview-title,\n    .preview-meta,\n    .preview-description,\n    .preview-url {\n        font-family: \"MiaoMiao\", \"Microsoft YaHei\", sans-serif !important;\n    }\n\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n\n        .phone-container {\n            width: min(100%, 360px);\n            border: 12px solid #d2d2d2;\n            border-radius: 36px;\n            background-image: url('https://files.catbox.moe/ty8vfh.png');\n            background-size: cover;\n            padding: 3px;\n            position: relative;\n            margin: 15px;\n            box-shadow: 0 0 20px rgba(0,0,0,0.1);\n        }\n\n        .phone-charm {\n            position: absolute;\n            top: -1px;\n            right: -140px;\n            width: 180px;\n            height: 180px;\n            background-image: url('https://files.catbox.moe/fucrh3.png');\n            background-size: contain;\n            background-repeat: no-repeat;\n            z-index: 1;\n            pointer-events: none;\n            \n            transform-origin: top center;\n            \n            animation: gentleSwing 6s ease-in-out infinite;\n        }\n        \n        @keyframes gentleSwing {\n            0%, 100% {\n                transform: rotate(0deg);\n            }\n            50% {\n                transform: rotate(5deg);\n            }\n        }\n\n        .header-icons {\n            display: flex;\n            gap: 8px;\n            position: relative;\n            z-index: 2;\n        }\n\n        .header-icon {\n            width: 20px;\n            height: 20px;\n            color: #c1c1c1;\n            cursor: pointer;\n            position: relative;\n            z-index: 2;\n        }\n\n        .phone-notch {\n            position: absolute;\n            top: 0;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 160px;\n            height: 13px;\n            background: #e7e7e7;\n            border-bottom-left-radius: 12px;\n            border-bottom-right-radius: 12px;\n            z-index: 999;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            gap: 8px;\n        }\n\n        .notch-camera {\n            width: 8px;\n            height: 8px;\n            background: #2242;\n            border-radius: 50%;\n            border: 2px solid #4454;\n        }\n\n        .notch-speaker {\n            width: 40px;\n            height: 4px;\n            background: #2252;\n            border-radius: 2px;\n        }\n\n        .notch-sensor {\n            width: 6px;\n            height: 6px;\n            background: #2225;\n            border-radius: 50%;\n            border: 1px solid #4454;\n        }\n\n        .chat-container {\n            width: 100%;\n            height: 600px;\n            background-image: url('https://files.catbox.moe/mwryua.jpg');\n            background-size: cover;\n            background-position: center;\n            border-radius: 24px;\n            overflow: hidden;\n            font-family: -apple-system, \"Segoe UI\", \"Hiragino Kaku Gothic ProN\", sans-serif;\n        }\n\n        .chat-header {\n            height: 56px;\n            background: rgba(246,246,246,0.95);\n            padding: 0 16px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            border-bottom: 1px solid rgba(0,0,0,0.05);\n            backdrop-filter: blur(10px);\n        }\n\n        .header-info {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n\n        .header-avatar {\n            width: 36px;\n            height: 36px;\n            border-radius: 50%;\n            object-fit: cover;\n            border: 2px solid #fff;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n\n        .header-text {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .chat-header h2 {\n            font-size: 15px;\n            color: #666;\n            font-weight: 600;\n            margin-bottom: 1px;\n        }\n\n        .header-status {\n            font-size: 12px;\n            color: #c1c1c1;\n            display: flex;\n            align-items: center;\n            gap: 4px;\n        }\n\n        .status-dot {\n            width: 6px;\n            height: 6px;\n            background: #c1c1c1;\n            border-radius: 50%;\n        }\n\n        .chat-messages {\n            height: 460px;\n            padding: 16px;\n            overflow-y: auto;\n        }\n\n        .chat-messages::-webkit-scrollbar {\n            width: 6px;\n        }\n\n        .chat-messages::-webkit-scrollbar-track {\n            background: transparent;\n        }\n\n        .chat-messages::-webkit-scrollbar-thumb {\n            background: rgba(0,0,0,0.1);\n            border-radius: 3px;\n        }\n\n        .message {\n            display: flex;\n            margin-bottom: 7px;\n            align-items: flex-start;\n            position: relative;\n            animation: message-pop 0.1s ease-out;\n        }\n\n        @keyframes message-pop {\n            0% {\n                transform: translateY(10px);\n                opacity: 0;\n            }\n            100% {\n                transform: translateY(0);\n                opacity: 1;\n            }\n        }\n\n        .message.sent {\n            flex-direction: row-reverse;\n        }\n\n        .avatar {\n            width: 32px;\n            height: 32px;\n            border-radius: 15%;\n            margin-top: 1px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            transition: transform 0.2s;\n        }\n\n        .avatar:hover {\n            transform: scale(1.1);\n        }\n\n        .message-wrapper {\n            max-width: 70%;\n            display: flex;\n            flex-direction: column;\n            margin: 0 10px;\n        }\n\n        .message-content {\n            padding: 3px 10px;\n            border-radius: 18px;\n            font-size: 14px;\n            line-height: 1.4;\n            word-wrap: break-word;\n            position: relative;\n            transition: transform 0.2s;\n        }\n\n        .message-content:hover {\n            transform: translateY(-2px);\n        }\n\n        .received .message-content {\n            background: linear-gradient(to bottom, #fff, #fff);\n            box-shadow: \n        0 0 0 1.5px #575757,\n        0 0 0 3px #fff,\n        0 3px 3px rgba(0,0,0,0.3);\n            color: #575757;\n            border-radius: 5px 5px 5px 5px;\n            position: relative;\n            overflow: hidden;\n        }\n\n.message.received::after {\n    content: \"\";\n    position: absolute;\n    bottom: 6px;\n    left: 45px; \n    width: 15px;  \n    height: 15px; \n    background-image: url('https://files.catbox.moe/uovij1.png'); \n    background-size: contain;\n    background-repeat: no-repeat;\n    z-index: 1; \n    pointer-events: none; \n}\n      \n\n\n        .sent .message-content {\n            background: linear-gradient(to bottom, #333, #333);\n            color: #fff;\n          box-shadow: \n        0 0 0 1.5px #fff,\n        0 0 0 2px #fff,\n        0 3px 3px rgba(0,0,0,0.3);\n            border-bottom-right-radius: 1px;\n            border-radius: 5px 5px 5px 5px;\n        }\n\n\n.message.sent::after {\n    content: \"\";\n    position: absolute;\n    bottom: 10px;\n    right: 45px; \n    width: 10px;  \n    height: 10px; \n    background-image: url('https://files.catbox.moe/efd2np.png'); \n    background-size: contain;\n    background-repeat: no-repeat;\n    z-index: 0; \n    pointer-events: none; \n      }\n\n.sent::after {\n            content: '';\n            position: absolute;\n            right: 38px;\n            bottom:14px;\n            width: 16px;\n            height: 16px;\n            background: url('https://files.catbx.moe/j86mhk.png') no-repeat center/contain;\n            z-index: 0;\n\n            animation: float 4s ease-in-out infinite 0.5s;\n}\n        .message-time {\n            font-size: 9px;\n            color: #888;\n            margin-top: 4px;\n            margin-left: 4px;\n            margin-right: 4px;\n        }\n\n        .sent .message-time {\n            text-align: right;\n        }\n\n      .typing-indicator {\n    display: inline-flex;\n    gap: 2px; /* 减小点之间的间距 */\n    padding: 2px 4px; /* 减小内边距 */\n    margin-top: 2px;\n    animation: none; /* 移除整体动画 */\n}\n\n.typing-dot {\n    width: 3px; /* 减小点的大小 */\n    height: 3px;\n    background: #999; /* 使用更柔和的颜色 */\n    border-radius: 50%;\n    animation: subtle-typing 1.5s infinite; /* 减慢动画速度，使用更柔和的动画 */\n}\n\n@keyframes subtle-typing {\n    0%, 100% {\n        transform: translateY(0);\n        opacity: 0.5;\n    }\n    50% {\n        transform: translateY(-1px); /* 减小上下移动的幅度 */\n        opacity: 0.8;\n    }\n}\n\n\n        .chat-input {\n            height: 52px;\n            background: rgba(246,246,246,0.95);\n            padding: 8px 16px;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            border-top: 1px solid rgba(0,0,0,0.05);\n            backdrop-filter: blur(10px);\n            position: relative;\n        }\n\n        .emoji-btn {\n            width: 32px;\n            height: 32px;\n            border: none;\n            border-radius: 50%;\n            background: #ededed;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: all 0.2s;\n            color: #a0a0a0;\n            flex-shrink: 0;\n        }\n\n        .emoji-btn:hover {\n            background: #ededed;\n            transform: scale(1.1);\n        }\n\n        .emoji-picker-container {\n            position: absolute;\n            bottom: 60px;\n            left: 16px;\n            display: none;\n            z-index: 1000;\n        }\n\n        .input-field {\n            flex: 1;\n            height: 30px;\n            border: 1px solid rgba(26,26,26,0.1);\n            border-radius: 18px;\n            background: #fff;\n            padding: 0 16px;\n            outline: none;\n            font-size: 14px;\n            color: #333;\n            transition: all 0.2s;\n            margin-right: 8px;\n            max-width: calc(100% - 96px);\n        }\n\n        .input-field:focus {\n            border-color: #b7b7b7;\n            box-shadow: 0 0 0 2px rgba(238,238,238,0.2);\n        }\n\n        .input-field::placeholder {\n            color: #ededed;\n        }\n\n        .send-btn {\n            width: 30px;\n            height: 30px;\n            border: none;\n            border-radius: 50%;\n            background: #ededed;\n            color: white;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: all 0.2s;\n            flex-shrink: 0;\n        }\n\n        .send-btn:hover {\n            background: #4A6FBF;\n            transform: scale(1.1);\n        }\n\n        @media screen and (max-width: 400px) {\n            .phone-container {\n                margin: 10px;\n                border-width: 8px;\n            }\n\n            .chat-container {\n                height: 580px;\n            }\n\n            .chat-messages {\n                height: 472px;\n            }\n\n            .message-content {\n                font-size: 11px;\n            }\n\n            .input-field {\n                max-width: calc(100% - 85px);\n            }\n        }\n/* 通话弹窗容器 */\n.voice-call-modal {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 90%;\n    max-width: 320px;\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(12px);\n    border-radius: 24px;\n    padding: 28px 24px;\n    text-align: center;\n    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.15);\n    z-index: 1000;\n    animation: modalSlideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1);\n}\n\n/* 模态框内容 */\n.modal-content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n}\n\n/* 头像样式 */\n.caller-avatar {\n    width: 96px;\n    height: 96px;\n    border-radius: 50%;\n    border: 3px solid #6C8CD5;\n    padding: 3px;\n    box-shadow: 0 0 0 rgba(108, 140, 213, 0.4);\n    animation: avatar-pulse 1.5s infinite;\n    margin-bottom: 4px;\n    object-fit: cover;\n}\n\n/* 来电者名称 */\n.caller-name {\n    font-size: 24px;\n    font-weight: 600;\n    color: #333;\n    margin: 4px 0;\n    font-family: -apple-system, system-ui, sans-serif;\n}\n\n/* 通话状态 */\n.call-status {\n    color: #666;\n    font-size: 15px;\n    margin-bottom: 24px;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    justify-content: center;\n}\n\n.call-status::before {\n    content: \"\";\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    background: #6C8CD5;\n    border-radius: 50%;\n    animation: status-blink 1s infinite;\n}\n\n/* 按钮容器 */\n.call-buttons {\n    display: flex;\n    gap: 32px;\n    margin-top: 8px;\n}\n\n/* 通话按钮基础样式 */\n.call-button {\n    width: 64px;\n    height: 64px;\n    border-radius: 50%;\n    border: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* 接听按钮 */\n.accept-call {\n    background: #6C8CD5;\n    color: white;\n}\n\n.accept-call:hover {\n    background: #4A6FBF;\n    transform: scale(1.1) rotate(15deg);\n    box-shadow: 0 6px 16px rgba(74, 111, 191, 0.2);\n}\n\n/* 拒绝按钮 */\n.reject-call {\n    background: #ff4d4f;\n    color: white;\n}\n\n.reject-call:hover {\n    background: #ff1f1f;\n    transform: scale(1.1) rotate(-15deg);\n    box-shadow: 0 6px 16px rgba(255, 77, 79, 0.2);\n}\n\n/* 按钮图标 */\n.call-button svg {\n    width: 28px;\n    height: 28px;\n    transition: transform 0.3s ease;\n}\n\n.call-button:hover svg {\n    transform: scale(1.1);\n}\n\n/* 动画定义 */\n@keyframes modalSlideIn {\n    from {\n        opacity: 0;\n        transform: translate(-50%, -45%);\n    }\n    to {\n        opacity: 1;\n        transform: translate(-50%, -50%);\n    }\n}\n\n@keyframes avatar-pulse {\n    0% {\n        box-shadow: 0 0 0 0 rgba(108, 140, 213, 0.4);\n    }\n    70% {\n        box-shadow: 0 0 0 20px rgba(108, 140, 213, 0);\n    }\n    100% {\n        box-shadow: 0 0 0 0 rgba(108, 140, 213, 0);\n    }\n}\n\n@keyframes status-blink {\n    0%, 100% {\n        opacity: 1;\n    }\n    50% {\n        opacity: 0.4;\n    }\n}\n\n/* 响应式调整 */\n@media screen and (max-width: 480px) {\n    .voice-call-modal {\n        width: 85%;\n        padding: 24px 20px;\n    }\n\n    .caller-avatar {\n        width: 80px;\n        height: 80px;\n    }\n\n    .caller-name {\n        font-size: 20px;\n    }\n\n    .call-buttons {\n        gap: 24px;\n    }\n\n    .call-button {\n        width: 56px;\n        height: 56px;\n    }\n}\n\n..browser-share {\n    background: white;\n    border-radius: 12px;\n    overflow: hidden;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n    width: 100%;\n    max-width: 380px;\n    font-family: -apple-system, system-ui, sans-serif;\n}\n\n.browser-share-header {\n    display: flex;\n    align-items: center;\n    padding: 8px 12px;\n    border-bottom: 1px solid rgba(0,0,0,0.05);\n    background: #f8f9fa;\n}\n\n.browser-share-icon {\n    width: 16px;\n    height: 16px;\n    margin-right: 6px;\n}\n\n.browser-share-title {\n    font-size: 12px;\n    color: #666;\n}\n\n.browser-share-preview {\n    cursor: pointer;\n    transition: all 0.2s ease;\n    padding: 12px;\n}\n\n.browser-share-preview:hover {\n    background: rgba(0,0,0,0.02);\n}\n\n.preview-title {\n    font-size: 14px;\n    font-weight: 500;\n    color: #333;\n    margin-bottom: 6px;\n    line-height: 1.4;\n}\n\n.preview-meta {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    margin-bottom: 6px;\n    font-size: 11px;\n    color: #999;\n}\n\n.preview-source {\n    color: #5B89FF;\n    font-weight: 500;\n}\n\n.preview-description {\n    font-size: 12px;\n    color: #666;\n    line-height: 1.5;\n    margin-bottom: 6px;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n.preview-url {\n    font-size: 11px;\n    color: #999;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n@keyframes shareAppear {\n    from {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.browser-share {\n    animation: shareAppear 0.3s ease-out;\n}\n\n@media screen and (max-width: 480px) {\n    .browser-share {\n        max-width: 100%;\n    }\n\n    .preview-title {\n        font-size: 13px;\n    }\n\n    .preview-description {\n        font-size: 11px;\n    }\n}\n    </style>\n</head>\n<body>\n    <div class=\"phone-container\">\n        <div class=\"phone-charm\"></div>\n        <div class=\"phone-notch\">\n            <div class=\"notch-sensor\"></div>\n            <div class=\"notch-camera\"></div>\n            <div class=\"notch-speaker\"></div>\n            <div class=\"notch-sensor\"></div>\n        </div>\n        <div class=\"chat-container\">\n        <audio class=\"voice-call-audio\" loop>\n    <source src=\"https://files.catbox.moe/23kcq4.mp3\" type=\"audio/mpeg\">\n</audio>\n<div class=\"voice-call-modal\" style=\"display: none;\">\n    <div class=\"modal-content\">\n        <img src=\"https://files.catbox.moe/u8ccy5.jpg\" class=\"caller-avatar\" alt=\"Caller Avatar\">\n        <div class=\"caller-name\">$1</div>\n        <div class=\"call-status\">语音通话邀请...</div>\n        <div class=\"call-buttons\">\n            <button class=\"call-button accept-call\">\n                <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                    <path fill=\"currentColor\" d=\"M20.01 15.38c-1.23 0-2.42-.2-3.53-.56a.977.977 0 0 0-1.01.24l-1.57 1.97c-2.83-1.35-5.48-3.9-6.89-6.83l1.95-1.66c.27-.28.35-.67.24-1.02c-.37-1.11-.56-2.3-.56-3.53c0-.54-.45-.99-.99-.99H4.19C3.65 3 3 3.24 3 3.99C3 13.28 10.73 21 20.01 21c.71 0 .99-.63.99-1.18v-3.45c0-.54-.45-.99-.99-.99z\"/>\n                </svg>\n            </button>\n            <button class=\"call-button reject-call\">\n                <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                    <path fill=\"currentColor\" d=\"M12 9c-1.6 0-3.15.25-4.6.72v3.1c0 .39-.23.74-.56.9c-.98.49-1.87 1.12-2.66 1.85c-.18.18-.43.28-.7.28c-.28 0-.53-.11-.71-.29L.29 13.08a.996.996 0 0 1 0-1.41c1.34-1.34 2.87-2.42 4.55-3.2C6.87 7.81 9.04 7 12 7s5.13.81 7.16 2.47c1.68.78 3.21 1.86 4.55 3.2c.39.39.39 1.02 0 1.41l-2.49 2.49c-.18.18-.43.29-.71.29c-.27 0-.52-.11-.7-.28c-.79-.74-1.69-1.36-2.67-1.85c-.33-.16-.56-.51-.56-.9v-3.1C15.15 9.25 13.6 9 12 9z\"/>\n                </svg>\n            </button>\n        </div>\n    </div>\n</div>\n\n            <div class=\"chat-header\">\n                <div class=\"header-info\">\n                    <img src=\"https://files.catbox.moe/58h8d0.jpg\" class=\"avatar\">\n                    <div class=\"header-text\">\n                        <h2>$1</h2>\n                        <div class=\"header-status\">\n                            <div class=\"status-dot\"></div>\n                            オンライン\n                        </div>\n                    </div>\n                </div>\n              <div class=\"header-icons\">\n    <svg class=\"header-icon diary-btn\" viewBox=\"0 0 24 24\">\n        <path fill=\"currentColor\" d=\"M19,3H14.82C14.4,1.84 13.3,1 12,1C10.7,1 9.6,1.84 9.18,3H5C3.9,3 3,3.9 3,5V19C3,20.1 3.9,21 5,21H19C20.1,21 21,20.1 21,19V5C21,3.9 20.1,3 19,3M12,3C12.55,3 13,3.45 13,4C13,4.55 12.55,5 12,5C11.45,5 11,4.55 11,4C11,3.45 11.45,3 12,3M7,7H17V5H19V19H5V5H7V7Z\"/>\n    </svg>\n    <svg class=\"header-icon home-btn\" viewBox=\"0 0 24 24\">\n        <path fill=\"currentColor\" d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\"/>\n    </svg>\n    <svg class=\"header-icon call-btn\" viewBox=\"0 0 24 24\">\n        <path fill=\"currentColor\" d=\"M12,2A3,3 0 0,1 15,5V11A3,3 0 0,1 12,14A3,3 0 0,1 9,11V5A3,3 0 0,1 12,2M19,11C19,14.53 16.39,17.44 13,17.93V21H11V17.93C7.61,17.44 5,14.53 5,11H7A5,5 0 0,0 12,16A5,5 0 0,0 17,11H19Z\"/>\n    </svg>\n</div>\n            </div>\n            <div class=\"chat-messages\">\n$2\n            </div>\n            <div class=\"chat-input\">\n                <button class=\"emoji-btn\">\n                    <svg viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\n                        <path fill=\"currentColor\" d=\"M12,2C6.477,2,2,6.477,2,12c0,5.523,4.477,10,10,10s10-4.477,10-10C22,6.477,17.523,2,12,2z M12,20c-4.418,0-8-3.582-8-8 s3.582-8,8-8s8,3.582,8,8S16.418,20,12,20z M15.5,11c0.828,0,1.5-0.672,1.5-1.5S16.328,8,15.5,8S14,8.672,14,9.5S14.672,11,15.5,11z M8.5,11c0.828,0,1.5-0.672,1.5-1.5S9.328,8,8.5,8S7,8.672,7,9.5S7.672,11,8.5,11z M12,17.5c2.33,0,4.31-1.46,5.11-3.5H6.89 C7.69,16.04,9.67,17.5,12,17.5z\"/>\n                    </svg>\n                </button>\n                <div class=\"emoji-picker-container\">\n                    <emoji-picker></emoji-picker>\n                </div>\n                <input type=\"text\" class=\"input-field\" placeholder=\"メッセージを入力...\">\n                <button class=\"send-btn\">\n                    <svg viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\n                        <path fill=\"currentColor\" d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"/>\n                    </svg>\n                </button>\n            </div>\n        </div>\n    </div>\n    <script>\n// 存储待发送的消息\nlet pendingMessages = [];\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    const emojiBtn = document.querySelector('.emoji-btn');\n    const emojiPickerContainer = document.querySelector('.emoji-picker-container');\n    const emojiPicker = document.querySelector('emoji-picker');\n    const textInput = document.querySelector('.input-field');\n    const sendBtn = document.querySelector('.send-btn');\n    const chatMessages = document.querySelector('.chat-messages');\n    const homeBtn = document.querySelector('.home-btn');\n    const callBtn = document.querySelector('.call-btn');\n    const avatars = document.querySelectorAll('.avatar');\n    const messageContents = document.querySelectorAll('.message-content');\n\n    // 音效对象\n    const sounds = {\n        click: new Audio('https://assets.mixkit.co/active_storage/sfx/2568/2568-preview.mp3'),\n        send: new Audio('https://assets.mixkit.co/active_storage/sfx/2570/2570-preview.mp3'),\n        emoji: new Audio('https://files.catbox.moe/gb0so5.mp3'),\n        bubble: new Audio('https://assets.mixkit.co/active_storage/sfx/2568/2568-preview.mp3'),\n        avatar: new Audio('https://assets.mixkit.co/active_storage/sfx/2575/2575-preview.mp3')\n    };\n\n    // 播放音效的函数\n    function playSound(soundType) {\n        const sound = sounds[soundType];\n        if(sound) {\n            sound.currentTime = 0;\n            sound.play().catch(err => console.log('音频播放失败:', err));\n        }\n    }\n\n    // 修改表情选择器样式\n    const style = document.createElement('style');\n    style.textContent = `\n        .emoji-picker-container {\n            position: absolute;\n            bottom: 60px;\n            left: 16px;\n            display: none;\n            z-index: 1000;\n            max-height: 300px;\n            overflow-y: auto;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n\n        emoji-picker {\n            --num-columns: 8;\n            width: 280px;\n            height: 300px;\n            --emoji-size: 1.25rem;\n            --background: white;\n        }\n    `;\n    document.head.appendChild(style);\n\n     // 为头像添加点击事件\n    avatars.forEach(avatar => {\n        avatar.addEventListener('click', () => {\n            playSound('avatar');\n        });\n    });\n    \n    // 为头像添加点击事件\nconst headerAvatar = document.querySelector('.header-info .avatar');\nheaderAvatar.addEventListener('click', () => {\n    playSound('avatar');\n    // 获取聊天对象名称\n    const chatName = document.querySelector('.header-text h2').textContent;\n    if (typeof triggerSlash === 'function') {\n        triggerSlash(`/send 查看${chatName}的动态主页|/trigger`);\n    }\n});\n\n    // 为消息气泡添加点击事件\n    messageContents.forEach(content => {\n        content.addEventListener('click', () => {\n            playSound('bubble');\n        });\n    });\n\n    // 为输入框添加点击事件\n    textInput.addEventListener('click', () => {\n        playSound('bubble');\n    });\n\n    // 表情按钮点击事件\n    emojiBtn.addEventListener('click', () => {\n        playSound('emoji');\n        emojiPickerContainer.style.display = emojiPickerContainer.style.display === 'none' ? 'block' : 'none';\n    });\n\n    // 选择表情事件\n    emojiPicker.addEventListener('emoji-click', (event) => {\n        playSound('click');\n        const emoji = event.detail.unicode;\n        const start = textInput.selectionStart;\n        const end = textInput.selectionEnd;\n        const text = textInput.value;\n\n        textInput.value = text.slice(0, start) + emoji + text.slice(end);\n        const newCursorPosition = start + emoji.length;\n        textInput.setSelectionRange(newCursorPosition, newCursorPosition);\n        emojiPickerContainer.style.display = 'none';\n        textInput.focus();\n    });\n\n    // 发送所有待处理消息\n    function sendAllPendingMessages() {\n        if (pendingMessages.length === 0) return;\n        \n        // 获取聊天对象名称\n        const chatName = document.querySelector('.header-text h2').textContent;\n        \n        // 构建消息内容，每条消息用换行符分隔\n        const messageText = pendingMessages.map(msg => msg.text).join('<p>');\n        \n        try {\n            if (typeof triggerSlash === 'function') {\n                triggerSlash(`/send 回复和${chatName}的聊天：<p>${messageText}\n                |/trigger`);\n            }\n        } catch (error) {\n            console.error('触发SillyTavern命令失败:', error);\n        }\n        \n        // 清空消息缓存\n        pendingMessages = [];\n    }\n\n    // 显示消息到手机界面\n    function displayMessageToPhone(messageText) {\n        playSound('send');\n        \n        // 获取最后一条消息的时间\n        const lastMessage = chatMessages.querySelector('.message:last-child');\n        let lastTimeStr = '11:47'; // 默认时间,以防没有之前的消息\n\n        if (lastMessage) {\n            lastTimeStr = lastMessage.querySelector('.message-time').textContent;\n        }\n\n        // 解析最后一条消息的时间\n        const [hours, minutes] = lastTimeStr.split(':').map(Number);\n\n        // 计算新消息的时间（最后一条消息时间+1分钟）\n        let newMinutes = minutes + 1;\n        let newHours = hours;\n\n        if (newMinutes >= 60) {\n            newMinutes = 0;\n            newHours = (newHours + 1) % 24;\n        }\n\n        // 格式化新时间\n        const timeString = `${newHours.toString().padStart(2, '0')}:${newMinutes.toString().padStart(2, '0')}`;\n\n        // 创建新消息HTML\n        const messageHtml = `\n            <div class=\"message sent\">\n                <div class=\"user_avatar avatar\" style=\"background-size: cover; background-position: center;\"></div>\n                <div class=\"message-wrapper\">\n                    <div class=\"message-content\">${messageText}</div>\n                    <div class=\"message-time\">${timeString}</div>\n                </div>\n            </div>\n        `;\n\n        // 添加新消息到聊天界面\n        chatMessages.insertAdjacentHTML('beforeend', messageHtml);\n\n        // 为新添加的消息元素添加音效事件\n        const newAvatar = chatMessages.lastElementChild.querySelector('.avatar');\n        const newContent = chatMessages.lastElementChild.querySelector('.message-content');\n\n        newAvatar.addEventListener('click', () => {\n            playSound('avatar');\n        });\n\n        newContent.addEventListener('click', () => {\n            playSound('bubble');\n        });\n\n        // 滚动到底部并清空输入框\n        chatMessages.scrollTop = chatMessages.scrollHeight;\n    }\n\n    // 处理输入框回车键事件\n    textInput.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            const messageText = textInput.value.trim();\n            \n            if (messageText) {\n                // 添加到待发送消息队列\n                pendingMessages.push({\n                    text: messageText,\n                    time: new Date()\n                });\n                \n                // 显示到手机界面\n                displayMessageToPhone(messageText);\n                \n                // 清空输入框但保留焦点\n                textInput.value = '';\n            }\n        }\n    });\n\n    // 发送按钮点击事件\n    sendBtn.addEventListener('click', () => {\n        // 处理输入框中最后一行未发送的内容\n        const lastMessage = textInput.value.trim();\n        \n        if (lastMessage) {\n            pendingMessages.push({\n                text: lastMessage,\n                time: new Date()\n            });\n            displayMessageToPhone(lastMessage);\n        }\n        \n        // 发送所有待处理消息\n        if (pendingMessages.length > 0) {\n            sendAllPendingMessages();\n        }\n        \n        // 清空输入框\n        textInput.value = '';\n    });\n    \n    // 主页按钮点击事件\n    /* homeBtn.addEventListener('click', () => {\n        playSound('click');\n        if (typeof triggerSlash === 'function') {\n            triggerSlash('/send 查看聊天列表|/trigger');\n        }\n    }); */\n    \n    // 将日记按钮事件监听器移到这里\n    const diaryBtn = document.querySelector('.diary-btn');\n    diaryBtn.addEventListener('click', () => {\n        playSound('click');\n        if (typeof triggerSlash === 'function') {\n            triggerSlash('/send 查看$1的日记|/trigger');\n        }\n    });\n\ncallBtn.addEventListener('click', () => {\n    playSound('click');\n\n    // 获取聊天对象名称\n    const chatName = document.querySelector('.header-text h2').textContent;\n\n    // 显示通话弹窗\n    const modal = document.querySelector('.voice-call-modal');\n    modal.style.display = 'block';\n\n    // 播放通话音效\n    const callAudio = document.querySelector('.voice-call-audio');\n    callAudio.currentTime = 0;\n    callAudio.play();\n\n    // 获取挂断按钮\n    const rejectBtn = modal.querySelector('.reject-call');\n    let callTimeout;\n\n    // 添加挂断按钮点击事件\n    rejectBtn.addEventListener('click', () => {\n        modal.style.display = 'none';\n        callAudio.pause();\n        if (callTimeout) {\n            clearTimeout(callTimeout);\n        }\n    });\n\n    // 生成3-5秒的随机等待时间\n    const randomWaitTime = Math.floor(Math.random() * (5000 - 3000 + 1) + 3000);\n\n    // 随机时间后决定接听或拒绝\n    callTimeout = setTimeout(() => {\n        const randomNum = Math.random();\n        modal.style.display = 'none';\n        callAudio.pause();\n        if (randomNum <= 0.8) { // 80%概率接听\n            if (typeof triggerSlash === 'function') {\n                triggerSlash(`/send ${chatName}接听了语音通话|/trigger`);\n            }\n        } else { // 20%概率拒绝\n            if (typeof triggerSlash === 'function') {\n                triggerSlash(`/send ${chatName}拒绝了语音通话|/trigger`);\n            }\n        }\n    }, randomWaitTime);\n});\n\n// ... existing code ...\n\n    // 点击其他地方关闭表情选择器\n    document.addEventListener('click', (e) => {\n        if (!emojiBtn.contains(e.target) && !emojiPickerContainer.contains(e.target)) {\n            emojiPickerContainer.style.display = 'none';\n        }\n    });\n\n    // 预加载音频\n    Object.values(sounds).forEach(sound => {\n        sound.load();\n    });\n\n    // 动态监听新添加的消息\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            if (mutation.addedNodes.length) {\n                mutation.addedNodes.forEach((node) => {\n                    if (node.nodeType === 1) { // 元素节点\n                        const newAvatars = node.querySelectorAll('.avatar');\n                        const newContents = node.querySelectorAll('.message-content');\n\n                        newAvatars.forEach(avatar => {\n                            avatar.addEventListener('click', () => {\n                                playSound('avatar');\n                            });\n                        });\n\n                        newContents.forEach(content => {\n                            content.addEventListener('click', () => {\n                                playSound('bubble');\n                            });\n                        });\n                    }\n                });\n            }\n        });\n    });\n\n    observer.observe(chatMessages, {\n        childList: true,\n        subtree: true\n    });\n});\n\n// 存储对方的所有消息\nconst receivedMessages = Array.from(document.querySelectorAll('.message.received'));\n\n// 创建音效对象\nconst messageSound = new Audio('https://files.catbox.moe/do2yin.mp3');\n\n// 检查是否是最新的界面\nfunction isLatestInterface() {\n    const currentTimestamp = Date.now();\n    const lastTimestamp = parseInt(localStorage.getItem('lastInterfaceTimestamp') || '0');\n\n    // 更新时间戳\n    localStorage.setItem('lastInterfaceTimestamp', currentTimestamp.toString());\n\n    // 如果当前时间戳与上一个时间戳相差不到100ms，说明是同一个界面的复制\n    return (currentTimestamp - lastTimestamp) > 100;\n}\n\nfunction showMessages() {\n    // 检查是否有我方消息\n    const hasSentMessages = document.querySelectorAll('.message.sent').length > 0;\n\n    // 检查是否是最新界面\n    const isLatest = isLatestInterface();\n\n    if (!isLatest || !hasSentMessages) {\n        // 不是最新界面或没有我方消息时，直接显示所有消息\n        receivedMessages.forEach(msg => {\n            msg.style.display = 'flex';\n            // 播放消息音效\n            messageSound.currentTime = 0;\n            messageSound.play();\n        });\n        return;\n    }\n\n    // 最新界面且有我方消息时，使用渐进显示效果\n    receivedMessages.forEach(msg => {\n        msg.style.display = 'none';\n    });\n\n    // 随机打字时间（1-3秒）\n    function getRandomTypingTime() {\n        return Math.floor(Math.random() * (3000 - 1000 + 1) + 1000);\n    }\n\n    // 随机消息间隔时间（0.5-1.5秒）\n    function getRandomDelay() {\n        return Math.floor(Math.random() * (1500 - 500 + 1) + 500);\n    }\n\n    // 打字动画效果\n    function typeMessage(messageContent, originalContent, onComplete) {\n        // 检查是否包含特殊内容\n        if (originalContent.includes('random-image-container') ||\n            originalContent.includes('typing-indicator') ||\n            originalContent.includes('<div') ||\n            originalContent.includes('<img')) {\n            // 如果包含特殊内容，直接显示原始HTML\n            messageContent.innerHTML = originalContent;\n            messageSound.currentTime = 0;\n            messageSound.play();\n            onComplete();\n            return;\n        }\n\n        const typingIndicator = document.createElement('div');\n        typingIndicator.className = 'typing-indicator';\n        typingIndicator.innerHTML = '<span class=\"typing-dot\"></span><span class=\"typing-dot\"></span><span class=\"typing-dot\"></span>';\n\n        messageContent.textContent = '';\n        messageContent.appendChild(typingIndicator);\n\n        // 随机打字时间\n        const typingTime = getRandomTypingTime();\n\n        setTimeout(() => {\n            // 渐变过渡效果\n            typingIndicator.style.transition = 'opacity 0.5s';\n            typingIndicator.style.opacity = '0';\n\n            setTimeout(() => {\n                typingIndicator.remove();\n                messageContent.textContent = '';\n\n                let charIndex = 0;\n                const typeChar = () => {\n                    if (charIndex === 0) {\n                        // 在开始显示文字时就播放音效\n                        messageSound.currentTime = 0;\n                        messageSound.play();\n                    }\n                    if (charIndex < originalContent.length) {\n                        messageContent.textContent += originalContent.charAt(charIndex);\n                        charIndex++;\n                        setTimeout(typeChar, 50);\n                    } else {\n                        onComplete();\n                    }\n                };\n                typeChar();\n\n            }, 500);\n\n        }, typingTime);\n    }\n\n    // 逐条显示消息\n    function showMessagesSequentially(messages, currentIndex = 0) {\n        if (currentIndex >= messages.length) return;\n\n        const message = messages[currentIndex];\n        const messageContent = message.querySelector('.message-content');\n        const originalContent = messageContent.innerHTML;\n\n        // 显示消息容器\n        message.style.display = 'flex';\n\n        // 开始打字动画\n        typeMessage(messageContent, originalContent, () => {\n            // 当前消息显示完成后，延迟显示下一条\n            setTimeout(() => {\n                showMessagesSequentially(messages, currentIndex + 1);\n            }, getRandomDelay());\n        });\n    }\n\n    // 添加CSS样式\n    const style = document.createElement('style');\n    style.textContent = `\n        .typing-indicator {\n            display: inline-flex;\n            gap: 4px;\n            padding: 0 2px;\n        }\n\n        .typing-dot {\n            width: 4px;\n            height: 4px;\n            background: #666;\n            border-radius: 50%;\n            animation: typing-bounce 1.4s infinite;\n        }\n\n        .typing-dot:nth-child(2) { animation-delay: 0.2s; }\n        .typing-dot:nth-child(3) { animation-delay: 0.4s; }\n\n        @keyframes typing-bounce {\n            0%, 60%, 100% { transform: translateY(0); }\n            30% { transform: translateY(-4px); }\n        }\n    `;\n    document.head.appendChild(style);\n\n    // 延迟一段时间后开始显示消息\n    setTimeout(() => {\n        showMessagesSequentially(receivedMessages);\n    }, 1000);\n}\n\n// 启动消息显示\nshowMessages();\n\nfunction handleBrowserHistoryClick(content) {\n    // 播放精致的点击音效\n    const clickSound = new Audio('https://files.catbox.moe/gb0so5.mp3');\n    clickSound.volume = 0.6; // 调整音量\n    clickSound.play().catch(err => console.log('音频播放失败:', err));\n\n    // 添加点击视觉反馈\n    const preview = document.querySelector('.browser-share-preview');\n    preview.style.transform = 'scale(0.98)';\n    setTimeout(() => {\n        preview.style.transform = 'scale(1)';\n    }, 100);\n\n    // 从预览内容中获取URL\n    const urlElement = document.querySelector('.preview-url');\n    const url = urlElement ? urlElement.textContent : '';\n\n    // 发送消息到聊天系统，包含URL信息\n    if (typeof triggerSlash === 'function') {\n        triggerSlash(`/send 查看${content}浏览器内容\n${url}|/trigger`);\n    }\n}\n    </script>    \n</body>\n</html>\n```",
    "trimStrings": [],
    "placement": [
        2
    ],
    "disabled": false,
    "markdownOnly": true,
    "promptOnly": false,
    "runOnEdit": false,
    "substituteRegex": 0,
    "minDepth": null,
    "maxDepth": 5
}